// We added a separate helper method which evaluate different conditions such as A<>) or B>5 etc...
    private static boolean evaluateCondition(String condition) throws Exception {
        String[] parts;
        // We added an array of string which holds the left and right part of teh condition
        // Inside the condition.split() is the condition which needs interpreted and their respective meanings are returned in Java code
        if (condition.contains("<>")) {
            parts = condition.split("<>");
            return getVariableValue(parts[0]) != getVariableValue(parts[1]);
        } else if (condition.contains(">")) {
            parts = condition.split(">");
            return getVariableValue(parts[0]) > getVariableValue(parts[1]);
        } else if (condition.contains("<")) {
            parts = condition.split("<");
            return getVariableValue(parts[0]) < getVariableValue(parts[1]);
        } else if (condition.contains("=") && condition.contains(">")) {
            parts = condition.split(">=");
            return getVariableValue(parts[0]) >= getVariableValue(parts[1]);
        } else if (condition.contains("=") && condition.contains("<")) {
            parts = condition.split("<=");
            return getVariableValue(parts[0]) <= getVariableValue(parts[1]);
        } else if (condition.contains("=") && !condition.contains(">") && !condition.contains("<")) {
            parts = condition.split("=");
            return getVariableValue(parts[0]) == getVariableValue(parts[1]);
        } else {
            throw new Exception("Error: Unsupported condition: " + condition);
        }
    }

    private static double evaluateArithmeticCondition(String condition) throws Exception {
        // This method does the same thing as evaluateCondition
        // However these conditions return an actual arithmetic value and can't be added in the previous method as it is a boolean method
        String[] parts;
        if (condition.contains("+")) {
           parts = condition.split("\\+");
           return (getVariableValue(parts[0]) + getVariableValue(parts[1]));
        } else if (condition.contains("-")) {
            parts = condition.split("-");
            return (getVariableValue(parts[0]) - getVariableValue(parts[1]));
        } else if (condition.contains("*")) {
            parts = condition.split("\\*");
            return (getVariableValue(parts[0]) * getVariableValue(parts[1]));
        } else if (condition.contains("/")) {
            parts = condition.split("/");
            return (double) (getVariableValue(parts[0]) / getVariableValue(parts[1]));
        } else if (condition.contains("MOD")) {
            parts = condition.split("MOD");
            return (getVariableValue(parts[0]) % getVariableValue(parts[1]));
        } else {
            throw new Exception("Error: Unsupported Condition: " + condition);
        }
    }

    //This method was added to get the value of a variable or parse an integer directly
    private static int getVariableValue(String variable) throws Exception {
        // The trim method removes extra unnecessary spaces from the name or the value
        variable = variable.trim();
        if (variables.containsKey(variable)) {
            // This part of the code means that if the variable exists in the map, return its value
            return variables.get(variable);
        } else {
            try { // THis part tries to parse the variable as an integer if it's not in the map
                return Integer.parseInt(variable);
            } catch (NumberFormatException e) {
                // This part throws an exception if the variable is not in the map nor is it a valid number
                throw new Exception("Unknown variable or invalid number: " + variable);
            }
        }
    }
