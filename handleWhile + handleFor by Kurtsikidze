public class BasicInterpreter {
    private static final Map<String, Integer> variables = new HashMap<>();

    public static void main(String[] args) {
        // We added scanner to read the input from the user through the console
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter BASIC code line by line. Type \"FINISH\" in a new line to finish:");

        //We created an empty ArrayList of strings which would accept the codes written by the user as input
        List<String> codeLines = new ArrayList<>();
        while (true) {
            String line = scanner.nextLine().trim();
            //The compiler keeps reading until the user inputs "FINISH"
            if (line.equals("FINISH")) {
                break;
            }
            //All the lines until "FINISH" are added to the codeLines Arraylist
            codeLines.add(line);

        }

        // We added the method cleanedCode in order to get rid of the numbers in front of the code lines
        try {
            List<String> cleanedCode = cleanedCode(codeLines);
            parseAndExecute(cleanedCode);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    // This method is used to clean the code by removing line numbers and trimming unnecessary spaces
    public static List<String> cleanedCode(List<String> codeLines) {
        List<String> cleanedCode = new ArrayList<>();

        for (String line : codeLines) {
            // Going through the lines with the for-each loop, the line.trim() method is used to trim the code
            // And with the help of indexOf() method we find the the index of the first space
            String trimmedLine = line.trim();
            int firstSpaceIndex = trimmedLine.indexOf(" "); // Find the first space
            if (firstSpaceIndex != -1 && Character.isDigit(trimmedLine.charAt(0))) {
                // Remove first space and the the part before it if it starts with digits
                cleanedCode.add(trimmedLine.substring(firstSpaceIndex + 1).trim());
            } else {
                // If no space or no leading digits, add the line as is
                cleanedCode.add(trimmedLine);
            }
        }
        return cleanedCode;
    }

    // The following keywords were added for the parseExecute method to catch, however, this code still may change in the future
    private static void parseAndExecute(List<String> cleanedCode) throws Exception {
        // We iterate through the list by using the for-each loop in order to catch the keywords and we added the appropriate methods for each keyword
        // However, as of now, the methods only are added, not implemented
        for (String line : cleanedCode) {
            line = line.trim();

            if (line.startsWith("PRINT")) {
                handlePrint(line);
            } else if (line.contains("=") && !line.contains("FOR")) {
                handleAssignment(line);
            } else if (line.startsWith("INPUT")) {
                handleInput(line);
            } else if (line.startsWith("IF") || line.startsWith("ELSE") || line.startsWith("END")) {
                handleIf(line);
            } else if (line.startsWith("NEXT")) {
                handleNext(line);
            } else if (line.startsWith("WHILE") || line.startsWith("WEND")) {
                handleWhile(line, cleanedCode);
            } else if (line.startsWith("FOR")) {
                handleFor(line, cleanedCode);
            } else {
                throw new Exception("Unsupported or invalid statement: " + line);
            }
        }
    }

    // We added a separate helper method which evaluate different conditions such as A<>) or B>5 etc...
    private static boolean evaluateCondition(String condition) throws Exception {
        String[] parts;
        // We added an array of string which holds the left and right part of teh condition
        // Inside the condition.split() is the condition which needs interpreted and their respective meanings are returned in Java code
        if (condition.contains("<>")) {
            parts = condition.split("<>");
            return getVariableValue(parts[0]) != getVariableValue(parts[1]);
        } else if (condition.contains(">")) {
            parts = condition.split(">");
            return getVariableValue(parts[0]) > getVariableValue(parts[1]);
        } else if (condition.contains("<")) {
            parts = condition.split("<");
            return getVariableValue(parts[0]) < getVariableValue(parts[1]);
        } else if (condition.contains("=") && condition.contains(">")) {
            parts = condition.split(">=");
            return getVariableValue(parts[0]) >= getVariableValue(parts[1]);
        } else if (condition.contains("=") && condition.contains("<")) {
            parts = condition.split("<=");
            return getVariableValue(parts[0]) <= getVariableValue(parts[1]);
        } else if (condition.contains("=") && !condition.contains(">") && !condition.contains("<")) {
            parts = condition.split("=");
            return getVariableValue(parts[0]) == getVariableValue(parts[1]);
        } else {
            throw new Exception("Error: Unsupported condition: " + condition);
        }
    }

    private static double evaluateArithmeticCondition(String condition) throws Exception {
        // This method does the same thing as evaluateCondition
        // However these conditions return an actual arithmetic value and can't be added in the previous method as it is a boolean method
        String[] parts;
        if (condition.contains("+")) {
           parts = condition.split("\\+");
           return (getVariableValue(parts[0]) + getVariableValue(parts[1]));
        } else if (condition.contains("-")) {
            parts = condition.split("-");
            return (getVariableValue(parts[0]) - getVariableValue(parts[1]));
        } else if (condition.contains("*")) {
            parts = condition.split("\\*");
            return (getVariableValue(parts[0]) * getVariableValue(parts[1]));
        } else if (condition.contains("/")) {
            parts = condition.split("/");
            return (double) (getVariableValue(parts[0]) / getVariableValue(parts[1]));
        } else if (condition.contains("MOD")) {
            parts = condition.split("MOD");
            return (getVariableValue(parts[0]) % getVariableValue(parts[1]));
        } else {
            throw new Exception("Error: Unsupported Condition: " + condition);
        }
    }

    //This method was added to get the value of a variable or parse an integer directly
    private static int getVariableValue(String variable) throws Exception {
        // The trim method removes extra unnecessary spaces from the name or the value
        variable = variable.trim();
        if (variables.containsKey(variable)) {
            // This part of the code means that if the variable exists in the map, return its value
            return variables.get(variable);
        } else {
            try { // THis part tries to parse the variable as an integer if it's not in the map
                return Integer.parseInt(variable);
            } catch (NumberFormatException e) {
                // This part throws an exception if the variable is not in the map nor is it a valid number
                throw new Exception("Unknown variable or invalid number: " + variable);
            }
        }
    }

    // This is the placeholder method for handling "PRINT" statements
    private static void handlePrint(String line) {

    }
    // This is the placeholder method for handling variable assignments
    private static void handleAssignment(String line) {

    }
    // This is the placeholder method for handling "INPUT" statements
    private static void handleInput(String line) {

    }
    // This is the placeholder method for handling "IF" statements
    private static void handleIf(String line) {

    }
    // This is the placeholder method for handling "NEXT" statements
    private static void handleNext(String line) {

    }
    // This is the placeholder method for handling "WHILE" loops
    private static void handleWhile(String line, List<String> cleanedCode) throws Exception {
        String condition = line.substring(line.indexOf("WHILE") + 5).trim();
        List<String> loopBody = new ArrayList<>();
        int nestedLevel = 0;

        while (!cleanedCode.isEmpty()) {
            String loopLine = cleanedCode.remove(0).trim();
            if (loopLine.startsWith("WHILE")) {
                nestedLevel++;
            } else if (loopLine.startsWith("WEND")) {
                if (nestedLevel == 0) {
                    break; // Matching WEND found
                } else {
                    nestedLevel--; // Closing an inner WHILE loop
                }
            }
            loopBody.add(loopLine);
        }

        if (nestedLevel > 0) {
            throw new Exception("Unmatched WHILE/WEND detected.");
        }

        while (evaluateCondition(condition)) {
            parseAndExecute(new ArrayList<>(loopBody)); // Pass a copy to avoid modifying the original
        }
    }


    // This is the placeholder method for handling "FOR" loops
    private static void handleFor(String line, List<String> cleanedCode) throws Exception {
            String[] parts = line.substring(line.indexOf("FOR") + 3).trim().split("TO");
            String[] loopVarParts = parts[0].trim().split("=");

            String variable = loopVarParts[0].trim();
            int start = Integer.parseInt(loopVarParts[1].trim());
            int end = Integer.parseInt(parts[1].trim());
            int step = 1; // Default step

            if (line.contains("STEP")) {
                String[] stepParts = line.split("STEP");
                step = Integer.parseInt(stepParts[1].trim());
            }

            variables.put(variable, start);
            List<String> loopBody = new ArrayList<>();
            int nestedLevel = 0;

            while (!cleanedCode.isEmpty()) {
                String loopLine = cleanedCode.remove(0).trim();
                if (loopLine.startsWith("FOR")) {
                    nestedLevel++;
                } else if (loopLine.startsWith("NEXT")) {
                    if (nestedLevel == 0) {
                        break; // Matching NEXT found
                    } else {
                        nestedLevel--; // Closing an inner FOR loop
                    }
                }
                loopBody.add(loopLine);
            }

            if (nestedLevel > 0) {
                throw new Exception("Unmatched FOR/NEXT detected.");
            }

            for (int i = start; (step > 0 ? i <= end : i >= end); i += step) {
                variables.put(variable, i);
                parseAndExecute(new ArrayList<>(loopBody)); // Pass a copy to avoid modification
            }

            variables.remove(variable); // Cleanup variable after loop
        }


}

