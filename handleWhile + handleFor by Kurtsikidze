public class BasicInterpreter {
    //OTHER CODE HERE
    // This is the placeholder method for handling "WHILE" loops
    private static void handleWhile(String line) throws Exception {
        String condition = line.substring(line.indexOf("WHILE") + 5).trim();
        List<String> loopBody = new ArrayList<>();
        int nestedLevel = 0;

        while (!cleanedCode.isEmpty()) {
            String loopLine = cleanedCode.remove(0).trim();
            if (loopLine.startsWith("WHILE")) {
                nestedLevel++;
            } else if (loopLine.startsWith("WEND")) {
                if (nestedLevel == 0) {
                    break; // Matching WEND found
                } else {
                    nestedLevel--; // Closing an inner loop
                }
            }
            loopBody.add(loopLine);
        }

        if (nestedLevel > 0) {
            throw new Exception("Unmatched WHILE/WEND detected.");
        }

        while (evaluateCondition(condition)) {
            parseAndExecute(loopBody);
        }
    }

    // This is the placeholder method for handling "FOR" loops
    private static void handleFor(String line) throws Exception {
        // First extract loop parameters from the FOR statement
        String[] parts = line.substring(line.indexOf("FOR") + 3).trim().split("TO");
        String[] loopVarParts = parts[0].trim().split("=");

        String variable = loopVarParts[0].trim();
        int start = Integer.parseInt(loopVarParts[1].trim());
        int end = Integer.parseInt(parts[1].trim());
        int step = 1; // Default step

        // Check for optional STEP keyword
        if (line.contains("STEP")) {
            String[] stepParts = line.split("STEP");
            step = Integer.parseInt(stepParts[1].trim());
        }

        variables.put(variable, start);

        // Execute loop body for each iteration
        List<String> loopBody = new ArrayList<>();
        while (!cleanedCode.isEmpty()) {
            String loopLine = cleanedCode.remove(0).trim();
            if (loopLine.startsWith("NEXT")) {
                break;
            }
            loopBody.add(loopLine);
        }

        for (int i = start; (step > 0 ? i <= end : i >= end); i += step) {
            variables.put(variable, i);
            parseAndExecute(loopBody);
        }

        // Remove the loop variable after the loop ends
        variables.remove(variable);
    }
//OTHER CODE HERE
}
