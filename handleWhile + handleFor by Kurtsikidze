public class BasicInterpreter {
    //OTHER CODE HERE
    // This is the placeholder method for handling "WHILE" loops
    private static void handleWhile(String line, List<String> cleanedCode) throws Exception {
        String condition = line.substring(line.indexOf("WHILE") + 5).trim();

        List<String> loopBody = new ArrayList<>();
        int currentIndex = cleanedCode.indexOf(line);
        boolean foundWend = false;


        for (int i = currentIndex + 1; i < cleanedCode.size(); i++) {
            String nextLine = cleanedCode.get(i).trim();
            if (nextLine.startsWith("WEND")) {
                foundWend = true;
                break;
            }
            loopBody.add(nextLine);
        }
        if (!foundWend) {
            throw new Exception("WHILE loop is missing the WEND statement: " + line);
        }

        while (evaluateCondition(condition)) {
            parseAndExecute(loopBody);
        }
    }
    // This is the placeholder method for handling "FOR" loops
    private static void handleFor(String line, List<String> cleanedCode) throws Exception {
        String forPart = line.substring(line.indexOf("FOR") + 3).trim();
        String[] parts = forPart.split("=");
        if (parts.length != 2) {
            throw new Exception("Invalid FOR loop syntax: " + line);
        }

        String variable = parts[0].trim();
        String rangePart = parts[1].trim();

        String[] rangeComponents = rangePart.split("TO");
        if (rangeComponents.length < 2) {
            throw new Exception("FOR loop missing TO keyword: " + line);
        }

        double start = getVariableValue(rangeComponents[0].trim()); // The starter vaLue in the for loop
        double end; // The final value in the for loop
        double step = 1; // The change from one value to another in the for loop

        String[] endAndStep = rangeComponents[1].split("STEP");
        end = getVariableValue(endAndStep[0].trim());

        if (endAndStep.length > 1) {
            step = getVariableValue(endAndStep[1].trim());
        }

        if (step == 0) {
            throw new Exception("FOR loop step cannot be zero: " + line);
        }

        variables.put(variable, start);
        List<String> loopBody = new ArrayList<>();
        boolean foundNext = false;

        int currentIndex = cleanedCode.indexOf(line);
        for (int i = currentIndex + 1; i < cleanedCode.size(); i++) {
            String nextLine = cleanedCode.get(i).trim();
            if (nextLine.startsWith("NEXT")) {
                foundNext = true;
                break;
            }
            loopBody.add(nextLine);
        }

        if (!foundNext) {
            throw new Exception("FOR loop missing NEXT keyword: " + line);
        }

        double currentValue = start;
        while ((step > 0 && currentValue <= end) || (step < 0 && currentValue >= end)) {
            variables.put(variable, currentValue);
            parseAndExecute(loopBody);
            currentValue += step;
        }
    }
//OTHER CODE HERE
}
